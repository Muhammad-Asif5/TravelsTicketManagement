function viewReportByDate() { var e = $("#reservation").val(), a = e.substring(0, 10), e = e.substring(13); $.ajax({ type: "POST", url: "/GenerateInvoice/GetAllInvoiceByDate", data: { Dfrom: a, Dto: e }, success: function (e) { 1 == e.success ? ($("#myTable").DataTable().destroy(), $("table tbody").empty(), 0 < e.r.length && ($("#myTable").DataTable({ data: e.r, columns: [{ data: "Invoice_Number", width: "250px", orderable: !1, render: function (e, a, t, r) { return '<button class="btn btn-success btn-sm" id="' + e + '" onclick="ViewReportData(this.id)">Generate Invoice</button> <button onclick="getById(this.id)" id="' + e + '" class="btn btn-primary btn-sm">Edit</button> <button onclick="deleteById(this.id)" id="' + e + '" class="btn btn-danger btn-sm">Delete</button>' } }, { data: "Invoice_Number" }, { data: "ReceivePay_Status", render: function (e, a, t, r) { return "1" == t.ReceivePay_Status && "1" == t.Pay_Status && "01" == t.Ticket_Status ? '<label class="badge bg-success">Complete</label>' : "1" == t.ReceivePay_Status && "1" == t.Pay_Status && "03" == t.Ticket_Status ? '<label class="badge bg-info">Refund/Complete</label>' : "1" == t.ReceivePay_Status && "1" == t.Pay_Status && "02" == t.Ticket_Status ? '<label class="badge bg-info">Exchange</label>' : "1" != t.ReceivePay_Status && "1" != t.Pay_Status ? '<label class="badge bg-danger">Pending</label>' : "1" == t.ReceivePay_Status && "1" != t.Pay_Status ? '<label class="badge bg-danger">Not Paid</label>' : "1" != t.ReceivePay_Status && "1" == t.Pay_Status ? '<label class="badge bg-danger">Not Received</label>' : "-" } }, { title: "Invoice Date", data: "Invoice_Date", render: function (e) { return null == e ? "" : moment(e).format("DD/MMM/YYYY") } }, { data: "Ticket_Number" }, { data: "Description" }, { data: "Routing" }, { title: "Departure Date", data: "Departure_Date", render: function (e) { return null == e ? "" : moment(e).format("DD/MMM/YYYY") } }, { title: "Arrival Date", data: "Arrival_Date", render: function (e) { return null == e ? "" : moment(e).format("DD/MMM/YYYY") } }, { data: "Paid" }, { data: "Invoice_Amount", render: function (e) { return "$ " + e } }, { data: "Base_Fare" }, { data: "Tax" }, { data: "Other_Cost" }, { data: "Net_Payable" }], fnCreatedRow: function (e, a, t) { a = a.Invoice_Number; $(e).attr("id", a) }, scrollCollapse: !0, scrollX: !0, select: !0, scrollY: "50vh", order: [1, "DESC"], language: { search: "" }, bLengthChange: !1, bScrollCollapse: !0, processing: !0, sPaginationType: "full_numbers", oLanguage: { sEmptyTable: "No data found, Please click on <b>Add New Invoice</b> Button" } }), $(".dataTables_filter input").attr("placeholder", "Search Invoice"))) : alert(e.message) }, error: function (e) { alert(e) } }) } function ViewReportData(e) { if (null != e) { var a = "CReceiptVoucher/CReceiptVoucher?InvNo=" + e, e = window.innerHeight; window.innerWidth; return document.body.style.height = e + "px", newwindow = window.open(a, "_blank", "width=940,height=" + e), window.focus && newwindow.focus(), !1 } alert(0) } function Calculate_Invoice_Amount(e) { var a = $("#Base_Fare").val(), t = $("#Total_Value").val() - a; $("#Tax").val(t.toFixed(2)); var r = $("#Tax").val(), t = $("#Other_Cost").val(); "" != e && (r = parseFloat(a) + parseFloat(r) + parseFloat(t), $("#Invoice_Amount").val(r.toFixed(2)), t = $("#Base_Fare").val() * $("#Ticket_Commission").val() / 100, t = "" != $("#Ticket_Commission").val() ? (r = $("#VAT").val(), $("#Commission_Amount").val(t), r = r / 100 * t, $("#VAT_Amount").val(r.toFixed(2)), $("#Invoice_Amount").val() - $("#Other_Cost").val() - $("#VAT_Amount").val() - t) : $("#Invoice_Amount").val() - $("#Other_Cost").val() - t, $("#Net_Payable").val(t.toFixed(2))) } function changePayable_Code(e) { "" != e && $.ajax({ type: "POST", url: "/GenerateInvoice/GetPayAbleCommission", data: { PCode: e }, success: function (e) { $("#Ticket_Commission").val(e.Ticket_Commission); var a = $("#Base_Fare").val() * e.Ticket_Commission / 100; $("#Commission_Amount").val(a), $("#VAT").val(e.VAT); e = a * (e.VAT / 100); $("#VAT_Amount").val(e.toFixed(2)); a = $("#Invoice_Amount").val() - $("#Other_Cost").val() - $("#VAT_Amount").val() - a; $("#Net_Payable").val(a.toFixed(2)) } }) } function getById(e) { resetDatafromFrom(), $.ajax({ type: "POST", url: "/GenerateInvoice/GetDataById", data: { id: e }, success: function (e) { var a; "" == e ? swal("WARNING!", "You cannot edit this info / No Permission or Session Expired", "warning") : ("1" == e[0].Pay_Status || "1" == e[0].ReceivePay_Status ? $("#MistakenEdit").show() : $("#MistakenEdit").hide(), $("#Payable_Code").val(e[0].Payable_Code), $("#Invoice_Number").val(e[0].Invoice_Number), a = ConvertDate(e[0].Invoice_Date), $("#Invoice_Date").val(a), a = ConvertDate(e[0].Departure_Date), $("#Departure_Date").val(a), a = ConvertDate(e[0].Arrival_Date), $("#Arrival_Date").val(a), $("#Ticket_Number").val(e[0].Ticket_Number), $("#Description").val(e[0].Description), $("#Routing").val(e[0].Routing), $("#Invoice_Amount").val(e[0].Invoice_Amount), $("#ZIP_Code").val(e[0].ZIP_Code), $("#Base_Fare").val(e[0].Base_Fare), $("#Tax").val(e[0].Tax), $("#Other_Cost").val(e[0].Other_Cost), $("#Stream_ID").val(e[0].Stream_ID).trigger("change"), $("#Other_Ref").val(e[0].Other_Ref), $("#Cust_Code").val(e[0].Cust_Code).trigger("change"), $("#Ticket_Status").val(e[0].Ticket_Status).trigger("change"), $("#Agent_ID").val(e[0].Agent_ID).trigger("change"), $("#TicketClass_ID").val(e[0].TicketClass_ID).trigger("change"), $("#Ticket_Commission").val(e[0].Ticket_Commission), $("#VAT").val(e[0].VAT), $("#Commission_Amount").val(e[0].Commission_Amount), $("#VAT_Amount").val(e[0].VAT_Amount), $("#Net_Payable").val(e[0].Net_Payable), $("#Paid").val(e[0].Paid), $("#Paid2").val(e[0].Paid2), $("#Total_Value").val(e[0].Total_Value), $("#btnSave").hide(), $("#btnUpdate").show(), $(".modal-title").text("Update Invoice Details"), $("#myModal").modal("show"), $(".modal-header").addClass("bg-primary"), $(".modal-header").removeClass("bg-success")) }, error: function (e) { swal("Error!", e, "error") } }) } function deleteById(t) { var e = $("#myTable").DataTable().row("#" + t).data().Agent_Name; swal({ title: "Are you sure?", text: "Your will not be able to recover " + e + " Invoice Data!", type: "warning", showCancelButton: !0, confirmButtonColor: "#DD6B55", confirmButtonText: "Yes, delete it!", cancelButtonText: "No, cancel plx!", closeOnConfirm: !1, closeOnCancel: !1 }, function (e) { e ? $.ajax({ type: "POST", url: "/GenerateInvoice/DeleteDataByID", data: { id: t }, success: function (e) { var a; e.success ? "Delete" == e.Delete ? (a = $("#myTable").DataTable(), index = a.row("#" + t), a.row(index[0]).data(), a.row(index[0]).remove().draw(), swal("Deleted!", e.message, "success"), setTimeout(function () { swal.close() }, 1e3)) : swal("WARNING!", e.message, "warning") : swal("WARNING!", "You cannot edit this info / No Permission or Session Expired", "warning") }, error: function (e) { swal("Error!", e, "error") } }) : swal("Cancelled", "Your file is safe :)", "error") }) } function resetDatafromFrom() { $("#MistakenEdit").hide(), $("select").val("").trigger("change"), $("#myForm")[0].reset(), $(".form-control.is-invalid").removeClass("is-invalid"), $("#Base_Fare").val(0), $("#Total_Value").val(0), $("#Tax").val(0), $("#Other_Cost").val(0) } function myDatatable() { $.ajax({ type: "GET", url: "/GenerateInvoice/GetAllInvoice", data: {}, success: function (e) { $("#myTable").DataTable({ data: e.r, columns: [{ data: "Invoice_Number", width: "230px", orderable: !1, render: function (e, a, t, r) { return '<button class="btn btn-success btn-sm" id="' + e + '" onclick="ViewReportData(this.id)">Generate Invoice</button> <button onclick="getById(this.id)" id="' + e + '" class="btn btn-primary btn-sm">Edit</button> <button onclick="deleteById(this.id)" id="' + e + '" class="btn btn-danger btn-sm">Delete</button>' } }, { data: "Invoice_Number" }, { data: "ReceivePay_Status", render: function (e, a, t, r) { return "1" == t.ReceivePay_Status && "1" == t.Pay_Status && "01" == t.Ticket_Status ? '<label class="badge bg-success">Complete</label>' : "1" == t.ReceivePay_Status && "1" == t.Pay_Status && "03" == t.Ticket_Status ? '<label class="badge bg-info">Refund/Complete</label>' : "1" == t.ReceivePay_Status && "1" == t.Pay_Status && "02" == t.Ticket_Status ? '<label class="badge bg-info">Exchange</label>' : "0" == t.ReceivePay_Status && "0" == t.Pay_Status ? '<label class="badge bg-danger">Pending</label>' : "1" == t.ReceivePay_Status && "0" == t.Pay_Status ? '<label class="badge bg-danger">Not Paid</label>' : "0" == t.ReceivePay_Status && "1" == t.Pay_Status ? '<label class="badge bg-danger">Not Received</label>' : "-" } }, { title: "Invoice Date", data: "Invoice_Date", render: function (e) { return null == e ? "" : moment(e).format("DD/MMM/YYYY") } }, { data: "Ticket_Number" }, { data: "Description" }, { data: "Routing" }, { title: "Departure Date", data: "Departure_Date", render: function (e) { return null == e ? "" : moment(e).format("DD/MMM/YYYY") } }, { title: "Arrival Date", data: "Arrival_Date", render: function (e) { return null == e ? "" : moment(e).format("DD/MMM/YYYY") } }, { data: "Paid" }, { data: "Invoice_Amount", render: function (e) { return "$ " + e } }, { data: "Base_Fare" }, { data: "Tax" }, { data: "Other_Cost" }, { data: "Net_Payable" }], fnCreatedRow: function (e, a, t) { a = a.Invoice_Number; $(e).attr("id", a) }, scrollCollapse: !0, scrollX: !0, select: !0, scrollY: "50vh", order: [1, "DESC"], language: { search: "" }, bLengthChange: !1, bScrollCollapse: !0, processing: !0, sPaginationType: "full_numbers", oLanguage: { sEmptyTable: "No data found, Please click on <b>Add New Invoice</b> Button" } }), $(".dataTables_filter input").attr("placeholder", "Search Invoice") }, error: function (e) { alert("Error! " + e) } }) } function ConvertDate(e) { if (null == e) return ""; e = /Date\(([^)]+)\)/.exec(e), e = new Date(parseFloat(e[1])); return e.getDate() + "/" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][e.getMonth()] + "/" + e.getFullYear() } function ToJavaScriptDate(e) { if (null == e) return ""; var a = /Date\(([^)]+)\)/.exec(e), t = new Date(parseFloat(a[1])), e = t.getFullYear(), a = 1 < (a = (1 + t.getMonth()).toString()).length ? a : "0" + a, t = t.getDate().toString(); return a + "/" + (t = 1 < t.length ? t : "0" + t) + "/" + e } $("#reservation").daterangepicker(), $(".select2").select2({ theme: "bootstrap4" }), $("#AddBtn").click(function () { resetDatafromFrom(), $("#btnSave").show(), $("#btnUpdate").hide(), $(".modal-title").text("Add New Invoice Details"), $("#myModal").modal("show"), $(".modal-header").removeClass("bg-primary"), $(".modal-header").addClass("bg-success") }), $("#btnUpdate").click(function (e) { if ($("#myForm").valid()) { var r = document.forms.myForm, a = { type: "POST", url: r.action, data: new FormData(r), success: function (e) { var a, t; e.success ? (a = $("#myTable").DataTable(), $("#myModal").modal("hide"), index = a.row("#" + r.Invoice_Number.value), (t = a.row(index[0]).data()).Invoice_Date = r.Invoice_Date.value, t.Ticket_Number = r.Ticket_Number.value, t.Description = r.Description.value, t.Routing = r.Routing.value, t.Departure_Date = r.Departure_Date.value, t.Arrival_Date = r.Arrival_Date.value, t.Invoice_Amount = r.Invoice_Amount.value, t.Base_Fare = r.Base_Fare.value, t.Tax = r.Tax.value, t.Other_Cost = r.Other_Cost.value, t.Net_Payable = r.Net_Payable.value, a.row(index[0]).data(t).draw(!1), $(".ui-pnotify").remove(), new PNotify({ title: "SUCCESS!", text: e.message, type: "success", animation: "slide", delay: 3e3, top: "500px", min_height: "16px", animate_speed: 400, text_escape: !0, styling: "bootstrap3" })) : "" == e ? swal("EXPIRED!", "Session Expired, Login Again", "warning") : swal("Error!", e.message, "error") }, error: function (e) { swal("Error!", e, "error") } }; return "multipart/form-data" == $("form").attr("enctype") && (a.contentType = !1, a.processData = !1), $.ajax(a), !1 } }), $("#btnSave").click(function () { var t = document.forms.myForm; if ($("#myForm").valid()) { var r = $("#myTable").DataTable(), e = { type: "POST", url: t.action, data: new FormData(t), success: function (e) { var a; e.success ? "Ticket" == e.message.substring(0, 6) ? swal("WARNING!", e.message, "warning") : ($("#myModal").modal("hide"), a = r.row.add({ Invoice_Number: '<button class="btn btn-success btn-sm"  id="' + e.NextID + '" onclick="ViewReportData(this.id)">Generate Invoice</button> <button onclick="getById(this.id)" id="' + e.NextID + '" class="btn btn-primary btn-sm">Edit</button> <button id="' + e.NextID + '" class="btn btn-danger btn-sm" onclick="deleteById(id)">Delete</button>', Invoice_Number: e.NextID, ReceivePay_Status: "Pending", Invoice_Date: t.Invoice_Date.value, Ticket_Number: $("#Ticket_Number").val(), Description: t.Description.value, Routing: t.Routing.value, "": t.Departure_Date.value, "": t.Arrival_Date.value, Paid: "0", Invoice_Amount: t.Invoice_Amount.value, Base_Fare: t.Base_Fare.value, Tax: t.Tax.value, Other_Cost: t.Other_Cost.value, Net_Payable: t.Net_Payable.value }).draw(!1), a = $("#myTable").dataTable().fnGetNodes(a), $(a).attr("id", e.NextID), $(".ui-pnotify").remove(), new PNotify({ title: "SUCCESS!", text: e.message, type: "success", animation: "slide", delay: 3e3, top: "500px", min_height: "16px", animate_speed: 400, text_escape: !0, styling: "bootstrap3" })) : "" == e ? swal("EXPIRED!", "Session Expired, Login Again", "warning") : swal("Error!", e.message, "error") }, error: function (e) { swal("Error!", e, "error") } }; return "multipart/form-data" == $("form").attr("enctype") && (e.contentType = !1, e.processData = !1), $.ajax(e), !1 } }), $(document).ready(function () { $("#MistakenEdit").hide(), myDatatable(), $("#Invoice_Date").datepicker({ format: "d/M/yyyy", todayBtn: "linked", daysOfWeekHighlighted: "5", calendarWeeks: !0, autoclose: !0, todayHighlight: !0, startDate: "15-12-2016", endDate: "15-12-2022" }), $("#Departure_Date").datepicker({ format: "d/M/yyyy", todayBtn: "linked", daysOfWeekHighlighted: "5", calendarWeeks: !0, autoclose: !0, todayHighlight: !0, startDate: "15-12-2016", endDate: "15-12-2022" }), $("#Arrival_Date").datepicker({ format: "d/M/yyyy", todayBtn: "linked", daysOfWeekHighlighted: "5", calendarWeeks: !0, autoclose: !0, todayHighlight: !0, startDate: "15-12-2016", endDate: "15-12-2022" }), $("#btnUpdate").hide(), $("#myForm").validate({ rules: { Invoice_Number: { required: !0 }, Invoice_Date: { required: !0 }, Base_Fare: { required: !0 }, Tax: { required: !0 }, Other_Cost: { required: !0 }, Stream_ID: { required: !0 }, Cust_Code: { required: !0 }, Ticket_Status: { required: !0 }, Payable_Code: { required: !0 }, Agent_ID: { required: !0 }, TicketClass_ID: { required: !0 }, Invoice_Amount: { required: !0 }, Ticket_Commission: { required: !0 }, Commission_Amount: { required: !0 }, Net_Payable: { required: !0 } }, messages: { Invoice_Number: { required: "Please Enter Invoice Number" }, Invoice_Date: { required: "Please Enter Invoice Date" }, Ticket_Number: { required: "Please Enter Ticket Number" }, Description: { required: "Please Enter Description " }, Routing: { required: "Please Enter Routing" }, Departure_Date: { required: "Please Enter Departure Date" }, Arrival_Date: { required: "Please Enter Arrival Date " }, Base_Fare: { required: "Please Enter Base Fare" }, Tax: { required: "Please Enter Tax" }, Other_Cost: { required: "Please Enter Other Cost" }, Stream_ID: { required: "Please Enter Stream ID" }, Cust_Code: { required: "Please Select Customer" }, Ticket_Status: { required: "Please Select Ticket Status" }, Payable_Code: { required: "Please Select Payable Code" }, Agent_ID: { required: "Please Select Agent" }, TicketClass_ID: { required: "Please Select Ticket Class" }, Other_Ref: { required: "Please Enter Other Reference" }, Invoice_Amount: { required: "Please Enter Invoice Amount" }, Ticket_Commission: { required: "Please Enter Ticket Commission" }, Commission_Amount: { required: "Please Enter Commission Amount" }, Net_Payable: { required: "Please Enter Net Payable" } }, errorElement: "span", errorPlacement: function (e, a) { e.addClass("invalid-feedback"), a.closest(".form-group").append(e) }, highlight: function (e, a, t) { $(e).addClass("is-invalid") }, unhighlight: function (e, a, t) { $(e).removeClass("is-invalid") } }) });