@model AMS.Models.mvcChangePasswordViewModel

@{
    Layout = "~/Views/Shared/_Admin.cshtml";
}

<br />
<div class="row">
    <div class="col-sm-3"></div>
    <div class="col-sm-6">
        <div>
            <div class="card card-primary card-outline">
                <div class="card-header">
                    <h3 class="card-title">
                        Change Password
                    </h3>
                </div>
                <div class="card-body login-card-body">
                    @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { enctype = "multipart/form-data", id = "myForm", @class = "form-horizontal", role = "form", autocomplete = "off" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary("", new { @class = "text-danger" })

                        <div class="input-group form-group mb-3">
                            @Html.EditorFor(model => model.OldPassword, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Current Password" } })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })

                        <div class="input-group form-group mb-3">
                            @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter New Password" } })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                        <div class="input-group form-group mb-3">
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Confirm Password" } })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="col-12">
                                <button type="submit" id="btnChangepassword" class="btn btn-primary btn-block">Change password</button>
                            </div>
                            <!-- /.col -->
                        </div>
                    }

                </div>
                <!-- /.login-card-body -->
            </div>
        </div>
    </div>
    <div class="col-sm-3"></div>
</div>


@section Scripts{
    <script>

        $("#btnChangepassword").click(function () {
            progid = [];
            var oForm = document.forms["myForm"];

            if ($("#myForm").valid()) {  //<<< I was missing this check

                var ajaxConfig = {
                    type: "POST",
                    url: oForm.action,
                    data: new FormData(oForm),
                    success: function (data) {

                        if (data.success) {
                            swal({
                                title: "SUCCESS!",
                                text: data.message,
                                type: "success"
                            }, function () {
                                window.location = "/Account/LogOff";
                            });
                        }
                        else {
                            swal("Error!", data.message, "error");
                        }
                    }
                }
                if ($("form").attr('enctype') == "multipart/form-data") {
                    ajaxConfig["contentType"] = false,
                        ajaxConfig["processData"] = false;
                }
                $.ajax(ajaxConfig);
                return false;
            }
        });

        $(document).ready(function () {


            $('#myForm').validate({
                rules: {
                    OldPassword: {
                        required: true
                    },
                    NewPassword: {
                        required: true,
                        minlength: 6
                        //Email: true,
                    },
                    ConfirmPassword: {
                        required: true,
                        minlength: 6,
                        //equalTo: "#Password"
                        equalTo: '[name="NewPassword"]'
                    },

                    //password: {
                    //    required: true,
                    //    minlength: 5
                    //},
                    //terms: {
                    //    required: true
                    //},
                },
                messages: {
                    OldPassword: {
                        required: "Please provide current password"
                    },
                    NewPassword: {
                        required: "Please provide a new password",
                        minlength: "Your password must be at least 6 characters long"
                    },
                    ConfirmPassword: {
                        required: "Please provide a confirm password",
                        minlength: "Your password must be at least 6 characters long",
                        equalTo: "Please enter the same password as above"
                    },
                    //terms: "Please accept our terms"
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            });

        });
    </script>


}

